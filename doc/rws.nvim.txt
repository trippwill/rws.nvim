==============================================================================
Introduction                                                         *rws.intro*

The RWS (Remote Window System) module sends commands
to an unfocused target window.

==============================================================================
Types                                                                *rws.types*

Win                                                             *rws.module.Win*

    Type: ~
        integer


RoutedKeyDef                                           *rws.module.RoutedKeyDef*

    Fields: ~
        {1}      (string)           Key to route
        {cmd}    (string)           Command to execute
        {mode?}  (string|string[])
        {desc?}  (string)


HighlightDef : vim.api.keyset.highlight                *rws.module.HighlightDef*

    Fields: ~
        {1}  (string)


RwsOptions                                               *rws.module.RwsOptions*

    Fields: ~
        {debug?}              (boolean|"verbose")  Enable debug mode
        {allow_current_win?}  (boolean)            Allow scrolling the current window
        {target_options?}     (OptValueSet)
        {highlights?}         (HighlightDef[])
        {keys?}               (RoutedKeyDef[])


==============================================================================
Module                                                              *rws.module*

M.defaults                                                 *rws.module.defaults*

    Type: ~
        (RwsOptions)


M.select_target({target_arg})                         *rws.module.select_target*
    Select a target window by winnr arg

    Parameters: ~
        {target_arg}  (string|integer)  Target window to select
                                        @return boolean, string?

    See: ~
        |vim.fn.winnr|


M.reset_target()                                       *rws.module.reset_target*
    Reset the target window to its original state


M.route({keyseq})                                             *rws.module.route*
    Route a mapped key to the target window.
    When the target window is not set,
    the key is sent to input.

    Parameters: ~
        {keyseq}  (string)  Key Sequence to route

    Returns: ~
        (boolean)  if the key was routed, false otherwise


M.setup({opts})                                               *rws.module.setup*
    Initialize the RWS module

    Parameters: ~
        {opts}  (RwsOptions)


==============================================================================
Introduction                                                   *opts-swap.intro*

 Module for swapping and resetting Vim options.
 Provides functions to set options on windows, buffers, globally, or locally,
 while returning the previous values for easy restoration.

==============================================================================
Types                                                          *opts-swap.types*

OptValueSet                                       *opts-swap.module.OptValueSet*

    Type: ~
        table<string,any>


The result of swapping options. A table containing the previous values of the options.
Will also include the target of the swap.
Always one of WinResult, BufferResult, GlobalResult, or LocalResult.

OptValueResult : table                         *opts-swap.module.OptValueResult*


WinResult : OptValueResult                          *opts-swap.module.WinResult*


BufferResult : OptValueResult                    *opts-swap.module.BufferResult*


GlobalResult : OptValueResult                    *opts-swap.module.GlobalResult*


LocalResult : OptValueResult                      *opts-swap.module.LocalResult*


==============================================================================
Module                                                        *opts-swap.module*

M.win_swap_opts({winid}, {opt_set})             *opts-swap.module.win_swap_opts*
    Set options on a window, returning the previous values

    Parameters: ~
        {winid}    (integer)
        {opt_set}  (OptValueSet)

    Returns: ~
        (WinResult)


M.buf_swap_opts({bufnr}, {opt_set})             *opts-swap.module.buf_swap_opts*
    Set options on a buffer, returning the previous values

    Parameters: ~
        {bufnr}    (integer)
        {opt_set}  (OptValueSet)

    Returns: ~
        (BufferResult)


M.global_swap_opts({opt_set})                *opts-swap.module.global_swap_opts*
    Set options globally, returning the previous values

    Parameters: ~
        {opt_set}  (OptValueSet)

    Returns: ~
        (GlobalResult)


M.local_swap_opts({opt_set})                  *opts-swap.module.local_swap_opts*
    Set options locally, returning the previous values

    Parameters: ~
        {opt_set}  (OptValueSet)

    Returns: ~
        (LocalResult)


M.reset_opts({opt_result})                         *opts-swap.module.reset_opts*
    Reset the options to their original values

    Parameters: ~
        {opt_result}  (OptValueResult)  @return boolean, string?


vim:tw=78:ts=8:noet:ft=help:norl:
